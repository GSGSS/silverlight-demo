//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace tcp_duplex_demo.DuplexClient {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/tcp_duplex_demo.Web")]
    public partial class Order : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<string> PayloadField;
        
        private tcp_duplex_demo.DuplexClient.OrderStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> Payload {
            get {
                return this.PayloadField;
            }
            set {
                if ((object.ReferenceEquals(this.PayloadField, value) != true)) {
                    this.PayloadField = value;
                    this.RaisePropertyChanged("Payload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public tcp_duplex_demo.DuplexClient.OrderStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/tcp_duplex_demo.Web")]
    public enum OrderStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Processing = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Silverlight", ConfigurationName="DuplexClient.IDuplexService", CallbackContract=typeof(tcp_duplex_demo.DuplexClient.IDuplexServiceCallback))]
    public interface IDuplexService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/Order", ReplyAction="Silverlight/IDuplexService/OrderResponse")]
        System.IAsyncResult BeginOrder(string name, int quantity, System.AsyncCallback callback, object asyncState);
        
        void EndOrder(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IDuplexService/Receive")]
        void Receive(tcp_duplex_demo.DuplexClient.Order order);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexServiceChannel : tcp_duplex_demo.DuplexClient.IDuplexService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexServiceClient : System.ServiceModel.DuplexClientBase<tcp_duplex_demo.DuplexClient.IDuplexService>, tcp_duplex_demo.DuplexClient.IDuplexService {
        
        private BeginOperationDelegate onBeginOrderDelegate;
        
        private EndOperationDelegate onEndOrderDelegate;
        
        private System.Threading.SendOrPostCallback onOrderCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public DuplexServiceClient(string endpointConfigurationName) : 
                this(new DuplexServiceClientCallback(), endpointConfigurationName) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public DuplexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new DuplexServiceClientCallback(), binding, remoteAddress) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public DuplexServiceClient() : 
                this(new DuplexServiceClientCallback()) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OrderCompleted;
        
        public event System.EventHandler<ReceiveReceivedEventArgs> ReceiveReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult tcp_duplex_demo.DuplexClient.IDuplexService.BeginOrder(string name, int quantity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrder(name, quantity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void tcp_duplex_demo.DuplexClient.IDuplexService.EndOrder(System.IAsyncResult result) {
            base.Channel.EndOrder(result);
        }
        
        private System.IAsyncResult OnBeginOrder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string name = ((string)(inValues[0]));
            int quantity = ((int)(inValues[1]));
            return ((tcp_duplex_demo.DuplexClient.IDuplexService)(this)).BeginOrder(name, quantity, callback, asyncState);
        }
        
        private object[] OnEndOrder(System.IAsyncResult result) {
            ((tcp_duplex_demo.DuplexClient.IDuplexService)(this)).EndOrder(result);
            return null;
        }
        
        private void OnOrderCompleted(object state) {
            if ((this.OrderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrderAsync(string name, int quantity) {
            this.OrderAsync(name, quantity, null);
        }
        
        public void OrderAsync(string name, int quantity, object userState) {
            if ((this.onBeginOrderDelegate == null)) {
                this.onBeginOrderDelegate = new BeginOperationDelegate(this.OnBeginOrder);
            }
            if ((this.onEndOrderDelegate == null)) {
                this.onEndOrderDelegate = new EndOperationDelegate(this.OnEndOrder);
            }
            if ((this.onOrderCompletedDelegate == null)) {
                this.onOrderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrderCompleted);
            }
            base.InvokeAsync(this.onBeginOrderDelegate, new object[] {
                        name,
                        quantity}, this.onEndOrderDelegate, this.onOrderCompletedDelegate, userState);
        }
        
        private void OnReceiveReceived(object state) {
            if ((this.ReceiveReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveReceived(this, new ReceiveReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.ReceiveReceived != null))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override tcp_duplex_demo.DuplexClient.IDuplexService CreateChannel() {
            return new DuplexServiceClientChannel(this);
        }
        
        private class DuplexServiceClientCallback : object, IDuplexServiceCallback {
            
            private DuplexServiceClient proxy;
            
            public void Initialize(DuplexServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void Receive(tcp_duplex_demo.DuplexClient.Order order) {
                this.proxy.OnReceiveReceived(new object[] {
                            order});
            }
        }
        
        private class DuplexServiceClientChannel : ChannelBase<tcp_duplex_demo.DuplexClient.IDuplexService>, tcp_duplex_demo.DuplexClient.IDuplexService {
            
            public DuplexServiceClientChannel(System.ServiceModel.DuplexClientBase<tcp_duplex_demo.DuplexClient.IDuplexService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginOrder(string name, int quantity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = quantity;
                System.IAsyncResult _result = base.BeginInvoke("Order", _args, callback, asyncState);
                return _result;
            }
            
            public void EndOrder(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Order", _args, result);
            }
        }
    }
    
    public class ReceiveReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public tcp_duplex_demo.DuplexClient.Order order {
            get {
                base.RaiseExceptionIfNecessary();
                return ((tcp_duplex_demo.DuplexClient.Order)(this.results[0]));
            }
        }
    }
}
